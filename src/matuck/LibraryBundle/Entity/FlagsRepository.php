<?php

namespace matuck\LibraryBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Pagerfanta\Pagerfanta;
use Pagerfanta\Adapter\DoctrineORMAdapter;

/**
 * FlagsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FlagsRepository extends EntityRepository
{
    public function findFilteredPaged($filters)
    {
        $qb = $this->filteredFlags($filters);
        $adapter = new DoctrineORMAdapter($qb);
       
        return new Pagerfanta($adapter);
    }
    
    public function findFiltered($filters)
    {
        $qb = $this->filteredFlags($filters);
       
        return $qb->getQuery()->execute();
    }
    
    /**
     * Builds query to get filtered out flags.
     * @param array $filters an array on what to filter out.
     * @return QueryBuilder
     */
    private function filteredFlags($filters = array())
    {
        $qb = $this->createQueryBuilder('f')
                ->orderBy('f.id', 'ASC');
        
        $status = array();
        if(isset($filters['open']))
        {
            if($filters['open'])
            {
                $status[] = 0;
            }
        }
        if(isset($filters['close']))
        {
            if($filters['close'])
            {
                $status[] = 1;
            }
        }
        if(!empty($status))
        {
            $qb->andWhere($qb->expr()->in('f.complete', $status));
        }
        $types = array();
        if(isset($filters['file']))
        {
            if($filters['file'])
            {
                $types[] = 'File';
            }
        }
        if(isset($filters['cover']))
        {
            if($filters['cover'])
            {
                $types[] = 'Cover';
            }
        }
        if(isset($filters['metadata']))
        {
            if($filters['metadata'])
            {
                $types[] = 'Metadata';
            }
        }
        if(isset($filters['copyright']))
        {
            if($filters['copyright'])
            {
                $types[] = 'Copyright';
            }
        }
        if(isset($filters['other']))
        {
            if($filters['other'])
            {
                $types[] = 'Other';
            }
        }
        if(!empty($types))
        {
            $qb->andWhere($qb->expr()->in('f.type', $types));
        }
        if(isset($filters['startdate']) || isset($filters['enddate']))
        {
            $dates = '';
            if($filters['startdate'] != '' && $filters['startdate'] != NULL && $filters['enddate'] != NULL && $filters['enddate'] != '')
            {
                $dates = 'both';
            }
            else
            {
                if($filters['startdate'] != '' && $filters['startdate'] != NULL)
                {
                    $dates = 'start';
                }
                if($filters['enddate'] != NULL && $filters['enddate'] != '')
                {
                    $dates = 'end';
                }
            }
            switch($dates)
            {
                case 'both':
                    $qb->andWhere('f.createdAt >= :starttime and f.createdAt <= :endtime');
                    $qb->setParameter('starttime', date('Y-m-d H:i:s', strtotime($filters['startdate'])));
                    $qb->setParameter('endtime', date('Y-m-d H:i:s', strtotime($filters['enddate'])+86400));
                    break;
                case 'start':
                    $qb->andWhere('f.createdAt >= :startdate');
                    $qb->setParameter('startdate', date('Y-m-d H:i:s', strtotime($filters['startdate'])));
                    break;
                case 'end':
                    $qb->andWhere('f.createdAt <= :enddate');
                    $qb->setParameter('enddate', date('Y-m-d H:i:s', strtotime($filters['enddate'])+86400));
                    break;
            }
        }
        return $qb;
    }
}
